"use client"

import type React from "react"
import { useState, useEffect } from "react"
import { Link } from "react-router-dom"
import { RoutePath } from "../routes/RoutePath"
import { useProducts } from "../hooks/useProducts"
import { useCategories } from "../hooks/useCategories"
import { useOrders } from "../hooks/useOrders"

const Dashboard: React.FC = () => {
  const [stats, setStats] = useState({
    products: 0,
    categories: 0,
    orders: 0,
  })

  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  const { fetchProducts } = useProducts()
  const { fetchCategories } = useCategories()
  const { fetchOrdersWithParams } = useOrders()

  const loadDashboardData = async () => {
    setIsLoading(true)
    setError(null)

    try {
      const promises = [
        fetchProducts({ pageNumber: 1, pageSize: 1 }).catch(() => ({ totalCount: 0 })),
        fetchCategories().catch(() => []),
        fetchOrdersWithParams({ pageNumber: 1, pageSize: 1 }).catch(() => ({ totalCount: 0 })),
      ]

      const [productsResponse, categoriesResponse, ordersResponse] = await Promise.allSettled(promises)

      let productCount = 0
      let categoryCount = 0
      let orderCount = 0

      if (productsResponse.status === "fulfilled" && productsResponse.value) {
        productCount = productsResponse.value.totalCount || 0
      }

      if (categoriesResponse.status === "fulfilled" && categoriesResponse.value) {
        categoryCount = Array.isArray(categoriesResponse.value) ? categoriesResponse.value.length : 0
      }

      if (ordersResponse.status === "fulfilled" && ordersResponse.value) {
        orderCount = ordersResponse.value.totalCount || 0
      }

      setStats({
        products: productCount,
        categories: categoryCount,
        orders: orderCount,
      })
    } catch (error) {
      console.error("Error loading dashboard data:", error)
      setError("Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu dashboard")
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    loadDashboardData()
    // ch·ªâ ch·∫°y 1 l·∫ßn khi mount
  }, [])

  const handleRefresh = () => {
    loadDashboardData()
  }

  if (error) {
    return (
      <div className="page-container">
        <div className="error-banner">
          <div className="error-content">
            <span className="error-icon">‚ö†Ô∏è</span>
            <span className="error-message">{error}</span>
            <button className="error-retry-btn" onClick={handleRefresh}>
              Th·ª≠ l·∫°i
            </button>
          </div>
        </div>
      </div>
    )
  }

  return (
    <div className="page-container">
      <div className="dashboard-header">
        <div className="welcome-section">
          <h1 className="dashboard-title">
            <span className="title-icon">üéµ</span>
            Ch√†o m·ª´ng ƒë·∫øn v·ªõi Music Shop Admin
          </h1>
          <p className="dashboard-subtitle">Qu·∫£n l√Ω c·ª≠a h√†ng nh·∫°c c·ª• c·ªßa b·∫°n m·ªôt c√°ch hi·ªáu qu·∫£</p>
        </div>
        <div className="dashboard-actions">
          <button className="refresh-btn" onClick={handleRefresh} disabled={isLoading}>
            <span className="refresh-icon">{isLoading ? "‚è≥" : "üîÑ"}</span>
            {isLoading ? "ƒêang t·∫£i..." : "L√†m m·ªõi"}
          </button>
        </div>
      </div>

      {/* Main Stats */}
      <div className="stats-grid">
        <Link to={RoutePath.PRODUCTS} className="stat-card-link">
          <div className="stat-card products-card">
            <div className="stat-icon-container">
              <div className="stat-icon">üé∏</div>
              <div className="stat-badge">S·∫£n ph·∫©m</div>
            </div>
            <div className="stat-content">
              <div className="stat-number">
                {isLoading ? (
                  <div className="loading-number">‚è≥</div>
                ) : (
                  <span className="number-display">{stats.products.toLocaleString()}</span>
                )}
              </div>
              <div className="stat-label">T·ªïng s·ªë s·∫£n ph·∫©m</div>
              <div className="stat-description">Qu·∫£n l√Ω kho h√†ng nh·∫°c c·ª•</div>
            </div>
            <div className="stat-arrow">‚Üí</div>
          </div>
        </Link>

        <Link to={RoutePath.CATEGORIES} className="stat-card-link">
          <div className="stat-card categories-card">
            <div className="stat-icon-container">
              <div className="stat-icon">üìÅ</div>
              <div className="stat-badge">Danh m·ª•c</div>
            </div>
            <div className="stat-content">
              <div className="stat-number">
                {isLoading ? (
                  <div className="loading-number">‚è≥</div>
                ) : (
                  <span className="number-display">{stats.categories.toLocaleString()}</span>
                )}
              </div>
              <div className="stat-label">Danh m·ª•c s·∫£n ph·∫©m</div>
              <div className="stat-description">Ph√¢n lo·∫°i v√† t·ªï ch·ª©c s·∫£n ph·∫©m</div>
            </div>
            <div className="stat-arrow">‚Üí</div>
          </div>
        </Link>

        <Link to={RoutePath.ORDERS} className="stat-card-link">
          <div className="stat-card orders-card">
            <div className="stat-icon-container">
              <div className="stat-icon">üì¶</div>
              <div className="stat-badge">ƒê∆°n h√†ng</div>
            </div>
            <div className="stat-content">
              <div className="stat-number">
                {isLoading ? (
                  <div className="loading-number">‚è≥</div>
                ) : (
                  <span className="number-display">{stats.orders.toLocaleString()}</span>
                )}
              </div>
              <div className="stat-label">T·ªïng ƒë∆°n h√†ng</div>
              <div className="stat-description">Theo d√µi v√† x·ª≠ l√Ω ƒë∆°n h√†ng</div>
            </div>
            <div className="stat-arrow">‚Üí</div>
          </div>
        </Link>
      </div>

      {/* Quick Actions */}
      <div className="quick-actions-section">
        <h2 className="section-title">
          <span className="section-icon">‚ö°</span>
          Thao t√°c nhanh
        </h2>
        <div className="quick-actions-grid">
          <Link to={RoutePath.PRODUCTS} className="quick-action-card">
            <div className="action-icon">‚ûï</div>
            <div className="action-content">
              <h3>Th√™m s·∫£n ph·∫©m</h3>
              <p>Th√™m nh·∫°c c·ª• m·ªõi v√†o kho</p>
            </div>
          </Link>

          <Link to={RoutePath.CATEGORIES} className="quick-action-card">
            <div className="action-icon">üìÇ</div>
            <div className="action-content">
              <h3>Qu·∫£n l√Ω danh m·ª•c</h3>
              <p>T·∫°o v√† ch·ªânh s·ª≠a danh m·ª•c</p>
            </div>
          </Link>

          <Link to={RoutePath.ORDERS} className="quick-action-card">
            <div className="action-icon">üìã</div>
            <div className="action-content">
              <h3>Xem ƒë∆°n h√†ng</h3>
              <p>Theo d√µi ƒë∆°n h√†ng m·ªõi</p>
            </div>
          </Link>

          <Link to={RoutePath.STORE_LOCATIONS} className="quick-action-card">
            <div className="action-icon">üìç</div>
            <div className="action-content">
              <h3>V·ªã tr√≠ c·ª≠a h√†ng</h3>
              <p>Qu·∫£n l√Ω ƒë·ªãa ƒëi·ªÉm kinh doanh</p>
            </div>
          </Link>
        </div>
      </div>

      {/* System Status */}
      <div className="system-status">
        <h2 className="section-title">
          <span className="section-icon">üí°</span>
          Tr·∫°ng th√°i h·ªá th·ªëng
        </h2>
        <div className="status-grid">
          <div className="status-item">
            <div className="status-indicator online"></div>
            <div className="status-content">
              <h4>API Server</h4>
              <p>Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng</p>
            </div>
          </div>
          <div className="status-item">
            <div className="status-indicator online"></div>
            <div className="status-content">
              <h4>Database</h4>
              <p>K·∫øt n·ªëi ·ªïn ƒë·ªãnh</p>
            </div>
          </div>
          <div className="status-item">
            <div className="status-indicator online"></div>
            <div className="status-content">
              <h4>Storage</h4>
              <p>Dung l∆∞·ª£ng kh·∫£ d·ª•ng</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default Dashboard
